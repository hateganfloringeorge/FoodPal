<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FoodPal.Orders.Mock.ChefsExperience.Api</name>
    </assembly>
    <members>
        <member name="T:FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter">
            <summary>
            Custom filter used to handle API internal exceptions
            </summary>
        </member>
        <member name="M:FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter})">
            <summary>
            Filter constructor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            OnActionExecuted
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            OnActionExecuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FoodPal.Orders.Mock.ChefsExperience.Api.Filters.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            OnException
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FoodPal.Orders.Mock.ChefsExperience.Api.Startup.GetXmlCommentsFilePath">
            <summary>
            Docs path
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
